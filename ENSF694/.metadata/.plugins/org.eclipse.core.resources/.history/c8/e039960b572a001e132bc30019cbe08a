import java.util.Scanner;

public class BinarySearchTree {
	
	public char data;
	public BinarySearchTree left;
	public BinarySearchTree right;
	
	public void purge() {
		data = 0;
		left = null;
		right = null;
	}
	
	public BSTNode createNode(char data) {
		BSTNode node = new BSTNode();
		node.data = data;
		node.left = null;
		node.right = null;
		return node;
	}

	public BSTNode insert(char data, BSTNode root){
		if(root == null)
			return createNode(data); //this is the first node
		
		if(data <= root.data) //go to left subtree
				root.left = insert(data, root.left);
		
		else if (data > root.data) //go to right subtree
				root.right = insert(data, root.right);
		
		return root;
	}
	
	public void inOrder(BSTNode node){
		if (node == null)
			return;

		inOrder(node.left);
		System.out.print(node.data + " ");
		inOrder(node.right);
	}
	
	public void preOrder(BSTNode node){
		if (node == null)
				return;
	
		System.out.print(node.data + " ");
		preOrder(node.left);
		preOrder(node.right);
	}
	
	public void postOrder(BSTNode node) {
		if (node == null)
			return;
	
		postOrder(node.left);
		postOrder(node.right);
		System.out.print(node.data + " ");
	}



	public static void main(String[] args) {
		
		
		int n = 0;
		
		
		char[] cArray;
		Scanner reader = new Scanner(System.in);		
		
		while(true) {
			try {
				System.out.println("Please enter the number of words you want to entered");
				n = Integer.parseInt(reader.nextLine());
					
				System.out.println("Number entered: " + n);
				//Note: Scanner is not closed here, since it will impact the string input
				//scanner in the main program. It will be closed in the main program.
				break;
				
			}catch (NumberFormatException e) {
				System.out.println(e.getMessage());
				System.out.println("Invalid entry. Please enter an integer");
			}
		}
		
		cArray = new char[n];
		for (int i = 0; i< n; i++) {
			cArray[i] = reader.next().charAt(0);
			
		}
			
		reader.close();
		
		BinarySearchTree A = new BinarySearchTree();
		BSTNode root = null; // Create an empty root node
		
		for(int i = 0; i< cArray.length; i++) {
			root = A.insert(cArray[i], root);
		}
		
		
		System.out.println("Inorder Traversal (left-root-right) of the Tree: ");
		A.inOrder(root);
		System.out.println("\nPreorder Traversal (root-left-right) of the Tree: ");
		A.preOrder(root);
		System.out.println("\nPostorder Traversal (left-right-root) of the Tree: ");
		A.postOrder(root);
	

			
	}

}
